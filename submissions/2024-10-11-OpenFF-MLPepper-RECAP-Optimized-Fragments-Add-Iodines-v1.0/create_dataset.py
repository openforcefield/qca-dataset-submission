from openff.qcsubmit.datasets import load_dataset, BasicDataset
from openff.qcsubmit.common_structures import DDXSettings, SCFProperties, Metadata
import tqdm
import numpy as np


def main():
    # load the datasets optimised at aimnet2
    esp_50k_I = load_dataset('esp_50k_I_singlepoint_dataset.json.bz2')

    dataset = BasicDataset(
        dataset_name="MLPepper RECAP Optimized Fragments v1.0 Add Iodines",
        dataset_tagline="MLPepper RECAP Optimized Fragments, optimised with aimnet2 (wb97m-d3).",
        description="A dataset of diverse Iodine fragments generated by filtering the original MLPepper RECAP Optimized Fragments v1.0 dataset for Cl and Br, and replacing them with Iodine "
        "containing I. These were generated using the Recap decomosition scheme from RDKit on the B and Si dataset from SPICE2. Every molecule has had 5 conformers generated using RDKit which were"
        "then geometry optimised using aimnet2 (wb97m-d3) to the default GAU criteria in geometric. The dataset should be ideal to generate charge models and will contain a range of electrostatic properties.",
        driver="properties",
        metadata=Metadata(
            submitter="bismuthadams1",
            long_description_url="https://github.com/openforcefield/qca-dataset-submission/tree/mlpepper_iodines/submissions/2024-10-11-OpenFF-MLPepper-RECAP-Optimized-Fragments-Add-Iodines-v1.0"
        ),
        compute_tag="rocket"
    )
    dataset.clear_qcspecs()
    # add our chossen default spec based on benchmarking dipole moments, MBIS charges and ESPs to CCSD
    # default keywords to ensure ultra fine grid
    keywords = {
        "dft_spherical_points": 590,
        "dft_radial_points": 99,
        "debug": 1
    }
    properties = [
        SCFProperties.Dipole,
        SCFProperties.Quadrupole,
        SCFProperties.LowdinCharges,
        SCFProperties.MullikenCharges,
        SCFProperties.MBISCharges,
        SCFProperties.MayerIndices,
        SCFProperties.WibergLowdinIndices,
        SCFProperties.DipolePolarizabilities,
    ]
    dataset.add_qc_spec(
        program="psi4",
        method="wb97x-d",
        basis="def2-tzvpp",
        spec_name="wb97x-d/def2-tzvpp",
        spec_description="The default spec of MLPepper",
        keywords=keywords,
        scf_properties=properties
    )
    ddx_spec = DDXSettings(
        ddx_solvent_epsilon=78.4
    )
    dataset.add_qc_spec(
        program="psi4",
        method="wb97x-d",
        basis="def2-tzvpp",
        spec_name="wb97x-d/def2-tzvpp/ddx-water",
        spec_description="The default MLPepper spec with ddx water implicit solvent model.",
        keywords=keywords,
        scf_properties=properties,
        implicit_solvent=ddx_spec
    )

    # add the molecules from each dataset
    expected_molecules = esp_50k_I.n_molecules 
    expected_records = esp_50k_I.n_records 
    # track the inchikey to make sure we have unique molecules only
    all_inchikey = set()

    for index, entry in tqdm.tqdm(esp_50k_I.dataset.items(), desc="Adding I", ncols=80):
        off_mol = entry.get_off_molecule(include_conformers=True)
        inchikey = off_mol.to_inchikey(fixed_hydrogens=True)
        if inchikey in all_inchikey:
            continue
        else:
            dataset.add_molecule(
                index=index,
                molecule=off_mol,
                extras=entry.extras,
                keywords=entry.keywords,
                attributes=entry.attributes
            )
            all_inchikey.add(inchikey)

    total_molecules = dataset.n_molecules
    total_records = dataset.n_records

    dataset.export_dataset("dataset.json.bz2")
    dataset.molecules_to_file("dataset.smi", "smi")

    dataset.visualize("dataset.pdf", columns=8)

    print(f"Expected molecules: {expected_molecules}, actual: {total_molecules}")
    print(f"Expected records: {expected_records}, actual: {total_records}")

   # summarize dataset for readme
    confs = np.array([len(mol.conformers) for mol in dataset.molecules])

    print("* Number of conformers:", sum(confs))
    print(
        "* Number of conformers per molecule (min, mean, max): "
        f"{confs.min()}, {confs.mean():.2f}, {confs.max()}"
    )

    masses = [
        [
            sum([atom.mass.m for atom in molecule.atoms])
            for molecule in dataset.molecules
        ]
    ]
    print(f"* Mean molecular weight: {np.mean(np.array(masses)):.2f}")
    print(f"* Max molecular weight: {np.max(np.array(masses)):.2f}")
    print("* Charges:", sorted(set(m.total_charge.m for m in dataset.molecules)))

    print("## Metadata")
    print(f"* Elements: {{{', '.join(dataset.metadata.dict()['elements'])}}}")

    def print_field(od, field):
        print(f"\t* {field}: {od[field]}")

    fields = [
        "basis",
        "implicit_solvent",
        "keywords",
        "maxiter",
        "method",
        "program",
    ]
    for spec, obj in dataset.qc_specifications.items():
        od = obj.dict()
        print("* Spec:", spec)
        for field in fields:
            print_field(od, field)
        print("\t* SCF properties:")
        for field in od["scf_properties"]:
            print(f"\t\t* {field}")

if __name__ == "__main__":
    main()

