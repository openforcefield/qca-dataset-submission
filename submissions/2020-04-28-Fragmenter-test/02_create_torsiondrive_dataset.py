#!/usr/bin/env python

import os
import json
import tarfile
import tqdm

import qcportal as ptl
import qcelemental as qcel
from qcelemental.models import Molecule

collection_name = "OpenFF Fragmenter Validation 1.0"
UPDATE = False

torsion_data_gz = "selected-torsions.tar.jz"
torsion_data = "selected-torsions.json"
local_run = False


def read_selected_torsions(input_json):
    """ Read data generated by select_torsions.py
    Returns
    -------
    selected_torsions: dict
        Dictionary for selected torsions, has this structure:
        {
            canonical_torsion_index1: {
                'initial_molecules': [ Molecule1a, Molecule1b, .. ],
                'atom_indices': [ (0,1,2,3) ],
                'attributes': {'canonical_explicit_hydrogen_smiles': .., 'canonical_isomeric_smiles': .., ..}
            },
            ..
        }
    """
    with open(input_json) as infile:
        selected_torsions = json.load(infile)
    return selected_torsions


print("Reading selected_torsions...")

if not os.path.exists(torsion_data):
    with tarfile.open(torsion_data_gz) as f:
        f.extractfile(torsion_data)
selected_torsions = read_selected_torsions(torsion_data)

print(f"Found {len(selected_torsions)} torsions")

print("Initializing dataset...")
if local_run:
    client = ptl.FractalClient("localhost:7777", verify=False)
else:
    client = ptl.FractalClient.from_file()

if UPDATE:
    ds = client.get_collection("TorsionDriveDataset", collection_name)
    print(ds)
else:
    # create a new dataset with specified name
    ds = ptl.collections.TorsionDriveDataset(collection_name, client=client)

    # create specification for this dataset
    opt_spec = {
        "program": "geometric",
        "keywords": {
            "coordsys": "tric",
            "enforce": 0.1,
            "reset": True,
            "qccnv": True,
            "epsilon": 0.0,
        }
    }

    qc_spec = {
        "driver": "gradient",
        "method": "B3LYP-d3bj",
        "basis": "dzvp",
        "program": "psi4",
        "keywords": 2
    }  # Keywords 2 id map compute wiberg bond orders, dipoles, and quadrupoles.

    ds.add_specification(
        "default",
        opt_spec,
        qc_spec,
        description="Standard OpenFF torsiondrive specification."
    )

# add molecules
print(f"Adding {len(selected_torsions)} torsions")
i = 0

for canonical_torsion_index, torsion_data in tqdm.tqdm(selected_torsions.items()):

    attributes = torsion_data["cmiles_identifiers"]
    torsion_atom_indices = torsion_data["dihedral"]
    grid_spacings = torsion_data["grid"] * len(torsion_atom_indices)
    initial_molecules = torsion_data["initial_molecules"]
#    print(i, canonical_torsion_index, len(initial_molecules))

    # Check connectivity
    molecule = qcel.models.Molecule(**initial_molecules[0])
    conn = qcel.molutil.guess_connectivity(molecule.symbols, molecule.geometry)
    assert (len(conn) + 3) > len(molecule.symbols), conn

    try:
        ds.add_entry(
            canonical_torsion_index,
            initial_molecules,
            torsion_atom_indices,
            grid_spacings,
            energy_upper_limit=0.1, # in hartree
            attributes=attributes,
            save=False, # If true, will ship metadata back and forth
        )
        i += 1
    except KeyError:
        continue

    # Save metadata (see save=False) every 30 for speed
    # metadata = attributes, pointers to ids in procedures
    if (i % 30) == 0:
        ds.save()

ds.save()
print("Submitting tasks...")
comp = ds.compute("default", tag="openff")
print(comp)

print("Complete!")
