"""Runs the torsion drive calculations."""
import gzip
import json

import tqdm

import qcelemental as qcel
import qcportal as ptl
from qcelemental.models import Molecule

COLLECTION_NAME = "OpenFF DANCE 1 eMolecules t142 v1.0"
INPUT_FILE = "optimization_inputs.json.gz"
UPDATE = True


def read_optimization_inputs(input_json_gz):
    """ Read data generated by 01_generate.py
    Returns
    -------
    optimization_inputs: dict
        Dictionary for selected torsions, has this structure:
        [
            {
                'cmiles_identifiers': {
                    "canonical_smiles": ...,
                    ..
                },
                'atom_indices': [
                    [
                        1,
                        2,
                        3,
                        4
                    ]
                ],
                'initial_molecules': [
                    Molecule1a,
                    Molecule1b,
                    ..
                ]
            },
            ..
        ]
    """
    with gzip.open(input_json_gz, 'r') as f:
        optimization_inputs = json.load(f)
    return optimization_inputs


def main():
    """Loads the input and runs all the calculations."""
    print("Reading optimization_inputs...")
    optimization_inputs = read_optimization_inputs(INPUT_FILE)
    print(f"Found {len(optimization_inputs)} torsions")

    print("Initializing dataset...")
    #  client = ptl.FractalClient("localhost:7777", verify=False)
    client = ptl.FractalClient.from_file()

    if UPDATE:
        dataset = client.get_collection("TorsionDriveDataset", COLLECTION_NAME)
    else:
        # create a new dataset with specified name
        dataset = ptl.collections.TorsionDriveDataset(COLLECTION_NAME,
                                                      client=client)

        # create specification for this dataset
        opt_spec = {
            "program": "geometric",
            "keywords": {
                "coordsys": "tric",
                "enforce": 0.1,
                "reset": True,
                "qccnv": True,
                "epsilon": 0.0,
            },
        }
        keyword = ptl.models.KeywordSet(
            values={
                "maxiter":
                    200,
                "scf_properties": [
                    "dipole",
                    "quadrupole",
                    "wiberg_lowdin_indices",
                    "mayer_indices",
                ],
            })
        keyword_id = client.add_keywords([keyword])[0]

        qc_spec = {
            "driver": "gradient",
            "method": "B3LYP-d3bj",
            "basis": "dzvp",
            "program": "psi4",
            "keywords": keyword_id,
        }
        dataset.add_specification(
            "default",
            opt_spec,
            qc_spec,
            description="Standard OpenFF torsiondrive specification.",
        )

    dataset.data.tags.extend(["openff", "inflight"])
    #dataset.data.group = "OpenFF"

    # Add molecules.
    print(f"Adding {len(optimization_inputs)} torsions")
    i = 0

    for item in tqdm.tqdm(optimization_inputs):
        attributes = item["cmiles_identifiers"]
        canonical_torsion_index = attributes["canonical_isomeric_smiles"].lower()
        torsion_atom_indices = item["atom_indices"]
        grid_spacings = [15] * len(torsion_atom_indices)
        initial_molecules = item["initial_molecules"]

        # Check connectivity
        molecule = qcel.models.Molecule(**initial_molecules[0])
        conn = qcel.molutil.guess_connectivity(molecule.symbols,
                                               molecule.geometry)
        assert (len(conn) + 3) > len(molecule.symbols), conn

        try:
            dataset.add_entry(
                canonical_torsion_index,
                initial_molecules,
                torsion_atom_indices,
                grid_spacings,
                energy_upper_limit=0.05,
                attributes=attributes,
                save=False,
            )
            i += 1
        except KeyError:
            continue

        # Save every 30 for speed
        if (i % 30) == 0:
            dataset.save()

    dataset.save()
    print("Submitting tasks...")
    comp = dataset.compute("default", tag="openff")
    print(comp)

    print("Complete!")


if __name__ == "__main__":
    main()
